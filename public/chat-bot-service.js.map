{"version":3,"file":"chat-bot-service.js","sourceRoot":"","sources":["chat-bot-service.ts"],"names":[],"mappings":"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","sourcesContent":["declare var BotChat: any;\r\n\r\ninterface ISessionTokenHead {\r\n  alg: string;\r\n  typ: string;\r\n}\r\n\r\ninterface ISessionTokenPayload {\r\n  userId: string;\r\n  connectorToken: string;\r\n  optionalAttributes: any;\r\n  iat: number;\r\n}\r\n\r\nclass SessionToken {\r\n  value: string = '';\r\n  head: ISessionTokenHead = null;\r\n  payload: ISessionTokenPayload = null;\r\n  hash: string = '';\r\n  constructorCallback: (e: SessionToken) => void = null;\r\n\r\n  constructor(callback?: (e: any) => any) {\r\n    this.constructorCallback = callback;\r\n\r\n    const request = new XMLHttpRequest();\r\n\r\n    request.addEventListener('load', (x) => this.response(this, x));\r\n\r\n    request.open('POST', '/chatBot');\r\n\r\n    request.send();\r\n  }\r\n\r\n  response(context: SessionToken, response: any) {\r\n    context.value = response.target.responseText;\r\n\r\n    if (!context.value) {\r\n      return;\r\n    }\r\n\r\n    const segments = context.value.split('.');\r\n\r\n    context.head = this.parse(segments[0]);\r\n\r\n    context.payload = this.parse(segments[1]);\r\n\r\n    context.hash = segments[2];\r\n\r\n    context.constructorCallback(context);\r\n  }\r\n\r\n  parse(value: string) {\r\n    const decodedValue = atob(value);\r\n\r\n    const result = JSON.parse(decodedValue);\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\ninterface IBotSettings {\r\n  webSocket: boolean;\r\n  resize: 'none' | 'window' | 'detect';\r\n  chatTitle: boolean | string;\r\n  showUploadButton: boolean;\r\n  container: HTMLElement;\r\n  domain: string;\r\n  locale: string;\r\n  trigger: string;\r\n}\r\n\r\nconst BuildUser = (id: string) => {\r\n  return {\r\n    id: id,\r\n    name: 'you',\r\n    role: 'user',\r\n  };\r\n};\r\n\r\nconst BuildBotConnection = (connectorToken: string, settings: IBotSettings) => {\r\n  return {\r\n    token: connectorToken,\r\n    domain: settings.domain,\r\n    webSocket: settings.webSocket,\r\n  };\r\n};\r\n\r\nconst BuildBotChatAppSettings = (connection: any, user: any, settings: IBotSettings) => {\r\n  return {\r\n    botConnection: connection,\r\n    user: user,\r\n    locale: settings.locale,\r\n    resize: settings.resize,\r\n    chatTitle: settings.chatTitle,\r\n    showUploadButton: settings.showUploadButton,\r\n  };\r\n};\r\n\r\nconst BuildActivity = (activityType: string, settings: IBotSettings, user: any) => {\r\n  return {\r\n    type: activityType,\r\n    locale: settings.locale,\r\n    value: {\r\n      trigger: settings.trigger,\r\n    },\r\n    from: user,\r\n    name: 'TriggerScenario',\r\n  };\r\n};\r\n\r\nclass ChatBotModel {\r\n  token: SessionToken = null;\r\n  bot: any = null;\r\n  connection: any = null;\r\n  settings: IBotSettings = null;\r\n\r\n  constructor(settings: IBotSettings, bindings: any) {\r\n    this.settings = settings;\r\n\r\n    this.token = new SessionToken((x) => this.sessionTokenCallback(this, x, bindings));\r\n  }\r\n\r\n  sessionTokenCallback = (context: ChatBotModel, sessionToken: SessionToken, bindings: any) => {\r\n    const user = BuildUser(sessionToken.payload.userId);\r\n\r\n    const connectionSettings = BuildBotConnection(sessionToken.payload.connectorToken, context.settings);\r\n\r\n    context.connection = new BotChat.DirectLine(connectionSettings);\r\n\r\n    const appSettings = BuildBotChatAppSettings(context.connection, user, context.settings);\r\n\r\n    context.bot = BotChat.App(appSettings, document.getElementById('botContainer'));\r\n\r\n    const activity = BuildActivity('invoke', context.settings, user);\r\n\r\n    context.connection.postActivity(activity).subscribe(function (id: any) {\r\n      console.log(JSON.stringify(id));\r\n    });\r\n\r\n    bindings(context);\r\n  };\r\n}\r\n"]}